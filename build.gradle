plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'
}
repositories {
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
//    js {
//        browser {
//        }
//        nodejs {
//        }
//    }

    compileKotlinJvm {
        kotlinOptions {
        }
        kotlinOptions.freeCompilerArgs = [
                "-Xallow-kotlin-package",
                "-Xmulti-platform",
                "-Xuse-experimental=kotlin.Experimental",
                "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
                "-Xuse-experimental=kotlin.ExperimentalStdlibApi"
        ]
    }

    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    macosX64("native") {
        compilations.main.cinterops {
            uv {
                compilerOpts "-I./src/nativeInterop/cinterop/libuv/include"
            }
            crypto {
                compilerOpts "-I./src/nativeInterop/cinterop/openssl/include"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi') // annotation FQ-name
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')

//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2"
                implementation 'org.conscrypt:conscrypt-openjdk-uber:2.2.1'

                // this is only necessary to get compilation working for self signed certificates. dependency isn't added.
                compileOnly group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
                compileOnly group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.60'
            }
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi') // annotation FQ-name
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')

                implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
                implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.60'
            }
        }
//        jsMain {
//            dependencies {
//                implementation kotlin('stdlib-js')
//            }
//            languageSettings {
//                useExperimentalAnnotation('kotlin.Experimental') // annotation FQ-name
//                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
//                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi') // annotation FQ-name
//            }
//        }
//        jsTest {
//            dependencies {
//                implementation kotlin('test-js')
//            }
//        }
        nativeMain {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi') // annotation FQ-name
            }
        }
        nativeTest {
        }
    }
}